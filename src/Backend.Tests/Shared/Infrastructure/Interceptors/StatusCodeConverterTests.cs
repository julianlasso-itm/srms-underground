using System.Net;
using Grpc.Core;

namespace Shared.Infrastructure.Exceptions
{
  [TestClass]
  public class StatusCodeConverterTests
  {
    [TestMethod]
    public void GetHttpStatusCodeFromGrpcStatus_ConvertsCorrectly()
    {
      // Arrange & Act & Assert
      Assert.AreEqual(
        HttpStatusCode.Conflict,
        StatusCodeConverter.GetHttpStatusCodeFromGrpcStatus(StatusCode.Aborted)
      );
      Assert.AreEqual(
        HttpStatusCode.Conflict,
        StatusCodeConverter.GetHttpStatusCodeFromGrpcStatus(StatusCode.AlreadyExists)
      );
      Assert.AreEqual(
        HttpStatusCode.GatewayTimeout,
        StatusCodeConverter.GetHttpStatusCodeFromGrpcStatus(StatusCode.Cancelled)
      );
      Assert.AreEqual(
        HttpStatusCode.InternalServerError,
        StatusCodeConverter.GetHttpStatusCodeFromGrpcStatus(StatusCode.DataLoss)
      );
      Assert.AreEqual(
        HttpStatusCode.GatewayTimeout,
        StatusCodeConverter.GetHttpStatusCodeFromGrpcStatus(StatusCode.DeadlineExceeded)
      );
      Assert.AreEqual(
        HttpStatusCode.PreconditionFailed,
        StatusCodeConverter.GetHttpStatusCodeFromGrpcStatus(StatusCode.FailedPrecondition)
      );
      Assert.AreEqual(
        HttpStatusCode.BadRequest,
        StatusCodeConverter.GetHttpStatusCodeFromGrpcStatus(StatusCode.InvalidArgument)
      );
      Assert.AreEqual(
        HttpStatusCode.NotFound,
        StatusCodeConverter.GetHttpStatusCodeFromGrpcStatus(StatusCode.NotFound)
      );
      Assert.AreEqual(
        HttpStatusCode.OK,
        StatusCodeConverter.GetHttpStatusCodeFromGrpcStatus(StatusCode.OK)
      );
      Assert.AreEqual(
        HttpStatusCode.RequestedRangeNotSatisfiable,
        StatusCodeConverter.GetHttpStatusCodeFromGrpcStatus(StatusCode.OutOfRange)
      );
      Assert.AreEqual(
        HttpStatusCode.Forbidden,
        StatusCodeConverter.GetHttpStatusCodeFromGrpcStatus(StatusCode.PermissionDenied)
      );
      Assert.AreEqual(
        HttpStatusCode.InternalServerError,
        StatusCodeConverter.GetHttpStatusCodeFromGrpcStatus(StatusCode.ResourceExhausted)
      );
      Assert.AreEqual(
        HttpStatusCode.Unauthorized,
        StatusCodeConverter.GetHttpStatusCodeFromGrpcStatus(StatusCode.Unauthenticated)
      );
      Assert.AreEqual(
        HttpStatusCode.ServiceUnavailable,
        StatusCodeConverter.GetHttpStatusCodeFromGrpcStatus(StatusCode.Unavailable)
      );
      Assert.AreEqual(
        HttpStatusCode.NotImplemented,
        StatusCodeConverter.GetHttpStatusCodeFromGrpcStatus(StatusCode.Unimplemented)
      );
      Assert.AreEqual(
        HttpStatusCode.InternalServerError,
        StatusCodeConverter.GetHttpStatusCodeFromGrpcStatus(StatusCode.Unknown)
      );
      Assert.AreEqual(
        HttpStatusCode.InternalServerError,
        StatusCodeConverter.GetHttpStatusCodeFromGrpcStatus((StatusCode)999)
      ); // Testing default case
    }

    [TestMethod]
    public void GetGrpcStatusCodeFromHttpStatusCode_ConvertsCorrectly()
    {
      // Arrange & Act & Assert
      Assert.AreEqual(
        StatusCode.Aborted,
        StatusCodeConverter.GetGrpcStatusCodeFromHttpStatusCode(HttpStatusCode.Conflict)
      );
      Assert.AreEqual(
        StatusCode.InvalidArgument,
        StatusCodeConverter.GetGrpcStatusCodeFromHttpStatusCode(HttpStatusCode.BadRequest)
      );
      Assert.AreEqual(
        StatusCode.Cancelled,
        StatusCodeConverter.GetGrpcStatusCodeFromHttpStatusCode(HttpStatusCode.GatewayTimeout)
      );
      Assert.AreEqual(
        StatusCode.Unknown,
        StatusCodeConverter.GetGrpcStatusCodeFromHttpStatusCode(HttpStatusCode.InternalServerError)
      );
      Assert.AreEqual(
        StatusCode.NotFound,
        StatusCodeConverter.GetGrpcStatusCodeFromHttpStatusCode(HttpStatusCode.NotFound)
      );
      Assert.AreEqual(
        StatusCode.OK,
        StatusCodeConverter.GetGrpcStatusCodeFromHttpStatusCode(HttpStatusCode.OK)
      );
      Assert.AreEqual(
        StatusCode.FailedPrecondition,
        StatusCodeConverter.GetGrpcStatusCodeFromHttpStatusCode(HttpStatusCode.PreconditionFailed)
      );
      Assert.AreEqual(
        StatusCode.OutOfRange,
        StatusCodeConverter.GetGrpcStatusCodeFromHttpStatusCode(
          HttpStatusCode.RequestedRangeNotSatisfiable
        )
      );
      Assert.AreEqual(
        StatusCode.PermissionDenied,
        StatusCodeConverter.GetGrpcStatusCodeFromHttpStatusCode(HttpStatusCode.Forbidden)
      );
      Assert.AreEqual(
        StatusCode.Unavailable,
        StatusCodeConverter.GetGrpcStatusCodeFromHttpStatusCode(HttpStatusCode.ServiceUnavailable)
      );
      Assert.AreEqual(
        StatusCode.Unauthenticated,
        StatusCodeConverter.GetGrpcStatusCodeFromHttpStatusCode(HttpStatusCode.Unauthorized)
      );
      Assert.AreEqual(
        StatusCode.Unimplemented,
        StatusCodeConverter.GetGrpcStatusCodeFromHttpStatusCode(HttpStatusCode.NotImplemented)
      );
      Assert.AreEqual(
        StatusCode.Unknown,
        StatusCodeConverter.GetGrpcStatusCodeFromHttpStatusCode((HttpStatusCode)999)
      ); // Testing default case
    }
  }
}
