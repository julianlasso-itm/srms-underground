// <auto-generated />
using System;
using AccessControl.Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace AccessControl.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240504224529_AddTableUser")]
    partial class AddTableUser
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("AccessControl.Infrastructure.Persistence.Models.RoleModel", b =>
                {
                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid")
                        .HasColumnName("rol_role_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<string>("Description")
                        .HasMaxLength(1024)
                        .HasColumnType("character varying(1024)")
                        .HasColumnName("rol_description");

                    b.Property<bool>("Disabled")
                        .HasColumnType("boolean")
                        .HasColumnName("rol_disabled");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("rol_name");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("RoleId");

                    b.HasIndex("Name", "DeletedAt")
                        .IsUnique();

                    b.ToTable("role");

                    b.HasData(
                        new
                        {
                            RoleId = new Guid("804d52b3-a852-4a24-bc66-a12403b316e9"),
                            CreatedAt = new DateTime(2024, 5, 4, 22, 45, 29, 408, DateTimeKind.Utc).AddTicks(9132),
                            Description = "Admin role",
                            Disabled = false,
                            Name = "Admin"
                        },
                        new
                        {
                            RoleId = new Guid("c4d1bef7-4f6b-47c0-a7c2-52a74b5d0178"),
                            CreatedAt = new DateTime(2024, 5, 4, 22, 45, 29, 408, DateTimeKind.Utc).AddTicks(9138),
                            Description = "User role",
                            Disabled = false,
                            Name = "User"
                        },
                        new
                        {
                            RoleId = new Guid("25fb8a38-9b31-4190-a223-355fb733285d"),
                            CreatedAt = new DateTime(2024, 5, 4, 22, 45, 29, 408, DateTimeKind.Utc).AddTicks(9143),
                            Description = "Guest role",
                            Disabled = false,
                            Name = "Guest"
                        },
                        new
                        {
                            RoleId = new Guid("9787f5bf-1b7f-418e-b0a9-47ad6a3b151c"),
                            CreatedAt = new DateTime(2024, 5, 4, 22, 45, 29, 408, DateTimeKind.Utc).AddTicks(9147),
                            Description = "SuperAdmin role",
                            Disabled = false,
                            Name = "SuperAdmin"
                        },
                        new
                        {
                            RoleId = new Guid("423aa66d-6585-47a1-b8fe-cd28f51dbca3"),
                            CreatedAt = new DateTime(2024, 5, 4, 22, 45, 29, 408, DateTimeKind.Utc).AddTicks(9151),
                            Description = "Moderator role",
                            Disabled = false,
                            Name = "Moderator"
                        },
                        new
                        {
                            RoleId = new Guid("9c559ac2-9422-4710-914f-9f15868ee08f"),
                            CreatedAt = new DateTime(2024, 5, 4, 22, 45, 29, 408, DateTimeKind.Utc).AddTicks(9156),
                            Description = "Editor role",
                            Disabled = false,
                            Name = "Editor"
                        },
                        new
                        {
                            RoleId = new Guid("cfbbc7ae-dcad-4bb2-be4a-d5bee48660e9"),
                            CreatedAt = new DateTime(2024, 5, 4, 22, 45, 29, 408, DateTimeKind.Utc).AddTicks(9160),
                            Description = "Author role",
                            Disabled = false,
                            Name = "Author"
                        },
                        new
                        {
                            RoleId = new Guid("7b049f15-50ab-42df-a7fa-b4a45bf82cbe"),
                            CreatedAt = new DateTime(2024, 5, 4, 22, 45, 29, 408, DateTimeKind.Utc).AddTicks(9164),
                            Description = "Contributor role",
                            Disabled = false,
                            Name = "Contributor"
                        },
                        new
                        {
                            RoleId = new Guid("2dfb50a9-2d2d-43af-8300-e795a0edce02"),
                            CreatedAt = new DateTime(2024, 5, 4, 22, 45, 29, 408, DateTimeKind.Utc).AddTicks(9168),
                            Description = "Subscriber role",
                            Disabled = false,
                            Name = "Subscriber"
                        },
                        new
                        {
                            RoleId = new Guid("550c7a0a-a93a-4841-88be-6eedc652b8e4"),
                            CreatedAt = new DateTime(2024, 5, 4, 22, 45, 29, 408, DateTimeKind.Utc).AddTicks(9173),
                            Description = "Member role",
                            Disabled = false,
                            Name = "Member"
                        },
                        new
                        {
                            RoleId = new Guid("f533c846-9f20-45cb-abab-3d809a05cdb8"),
                            CreatedAt = new DateTime(2024, 5, 4, 22, 45, 29, 408, DateTimeKind.Utc).AddTicks(9177),
                            Description = "Customer role",
                            Disabled = false,
                            Name = "Customer"
                        },
                        new
                        {
                            RoleId = new Guid("b935989c-bbb6-405b-b8a4-4a680e5bedfe"),
                            CreatedAt = new DateTime(2024, 5, 4, 22, 45, 29, 408, DateTimeKind.Utc).AddTicks(9181),
                            Description = "Client role",
                            Disabled = false,
                            Name = "Client"
                        },
                        new
                        {
                            RoleId = new Guid("6f0c0b78-b48e-458d-be72-c941685ade15"),
                            CreatedAt = new DateTime(2024, 5, 4, 22, 45, 29, 408, DateTimeKind.Utc).AddTicks(9185),
                            Description = "Viewer role",
                            Disabled = false,
                            Name = "Viewer"
                        },
                        new
                        {
                            RoleId = new Guid("a92770ae-70bd-47ec-a0cd-e4c82843ac43"),
                            CreatedAt = new DateTime(2024, 5, 4, 22, 45, 29, 408, DateTimeKind.Utc).AddTicks(9189),
                            Description = "Tester role",
                            Disabled = false,
                            Name = "Tester"
                        },
                        new
                        {
                            RoleId = new Guid("e1a9e7a9-5378-4d7b-9877-8b4c25dee471"),
                            CreatedAt = new DateTime(2024, 5, 4, 22, 45, 29, 408, DateTimeKind.Utc).AddTicks(9193),
                            Description = "Developer role",
                            Disabled = false,
                            Name = "Developer"
                        });
                });

            modelBuilder.Entity("AccessControl.Infrastructure.Persistence.Models.UserModel", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("usr_user_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<bool>("Disabled")
                        .HasColumnType("boolean")
                        .HasColumnName("usr_disabled");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("usr_email");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("usr_password");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("UserId");

                    b.HasIndex("Email", "DeletedAt")
                        .IsUnique();

                    b.HasIndex("Email", "Password");

                    b.ToTable("user");
                });

            modelBuilder.Entity("AccessControl.Infrastructure.Persistence.Models.UserPerRoleModel", b =>
                {
                    b.Property<Guid>("UserPerRoleId")
                        .HasColumnType("uuid")
                        .HasColumnName("upr_id");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid")
                        .HasColumnName("upr_role_id");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("upr_user_id");

                    b.HasKey("UserPerRoleId");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId", "RoleId")
                        .IsUnique();

                    b.ToTable("user_per_role");
                });

            modelBuilder.Entity("AccessControl.Infrastructure.Persistence.Models.UserPerRoleModel", b =>
                {
                    b.HasOne("AccessControl.Infrastructure.Persistence.Models.RoleModel", "Role")
                        .WithMany("UserPerRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AccessControl.Infrastructure.Persistence.Models.UserModel", "User")
                        .WithMany("UserPerRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AccessControl.Infrastructure.Persistence.Models.RoleModel", b =>
                {
                    b.Navigation("UserPerRoles");
                });

            modelBuilder.Entity("AccessControl.Infrastructure.Persistence.Models.UserModel", b =>
                {
                    b.Navigation("UserPerRoles");
                });
#pragma warning restore 612, 618
        }
    }
}
